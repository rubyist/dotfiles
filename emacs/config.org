#+STARTUP: overview

* General Emacs Settings
This section configures base settings for emacs.

** load path
Packages that are not available through elpa/melpa can be put into
~/.emacs.d/local/. This adds that to the emacs loadpath.

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/local/")
  #+END_SRC

** aliases
This section defines aliases.

#+BEGIN_SRC emacs-lisp
  ;; Use ibuffer whenever list-buffer is called.
  (defalias 'list-buffer 'ibuffer)
#+END_SRC

** keybindings
This section defines some global keybindings.

#+BEGIN_SRC emacs-lisp
  ;; Install the default keybindings for windmove.
  (windmove-default-keybindings)

  ;; Ingore C-z because why would I ever want that?!
  (global-unset-key (kbd "C-z"))
#+END_SRC

** interface tweaks
This section tweaks various aspects of the emacs interface.

#+BEGIN_SRC emacs-lisp
  ;; Turn off a bunch of annoying things.
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (blink-cursor-mode 0)
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; highlight current line, except in certain modes
  (global-hl-line-mode t)
  (make-variable-buffer-local 'global-hl-line-mode)
  (defvar my-ghd-modes '(
                         shell-mode-hook
                         git-commit-mode-hook
                         term-mode-hook
                         )
    "Modes to ensure global-hl-line-mode is disabled for.")
  (dolist (m my-ghd-modes)
    (add-hook m (lambda () (setq global-hl-line-mode nil))))

  ;; Use linum-mode when we're in a programming mode.
  (add-hook 'prog-mode-hook 'linum-mode)

  ;; Manually diminish things that can't be diminished via use-package.
  (diminish 'auto-revert-mode)
#+END_SRC

** set up packages with melpa
This section sets up emacs for using pcakges and bootstraps use-package.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  ;; Bootstrap 'use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+End_SRC

* Installed Packages
This section sets up all the various packages, primarily using use-package.

** ace window
[[https://github.com/abo-abo/ace-window][ace-window]] provides a quick and easy way to switch between windows.

This configuration steals the keybinding for other-window (C-x o) and
uses it for ace-window. I prefer ace-window to scope to the frame,
rather than globally.

Invoke ace-window with `C-x o`, as normal. If
there are only two windows, you'll jump to the other window. If there
are more than two windows, each window will get a numeric
overlay. Type the number to jump to the desired window.

Using a `C-u` prefix will swap windows. `C-u C-u` will delete the
selected window.

Once ace-window is active, other options can be taken:

- `x` - delete window
- `m` - swap (move) window
- `c` - split window fairly
- `v` - split window vertically
- `b` - split window horizontally
- `n` - select the previous window
- `i` - maximize selected window
- `o` - maximize current window

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :init
    (global-set-key [remap other-window] 'ace-window)
    (setq aw-scope 'frame)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))))
#+END_SRC

** auto complete
This just sets up the general [[https://github.com/auto-complete/auto-complete][auto-complete]] package.

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :diminish auto-complete-mode
    :init
    (ac-config-default)
    (global-auto-complete-mode t))
#+END_SRC

** counsel
counsel is used by the swiper package.

#+BEGIN_SRC emacs-lisp
  (use-package counsel)
#+END_SRC

** direx
[[https://github.com/m2ym/direx-el][direx]] is a general purpose directory/tree package. I use this for go-direx.

#+BEGIN_SRC emacs-lisp
  (use-package direx)
#+END_SRC

** flycheck
[[https://github.com/flycheck/flycheck][flycheck]] is used for syntax checking in various languages.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :init
    (global-flycheck-mode t))
#+END_SRC

** go packages
This section contains all the packages related to Go programming.

*** Packages to look at
I'm not currently using these packages, but they look interesting.

- [[https://github.com/iced/go-gopath][go-gopath]]
- [[https://github.com/samertm/go-stacktracer.el][go-stacktracer]]

*** go-mode
[[https://github.com/dominikh/go-mode.el][go-mode]] is the base package for working with Go.

#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":/home/scott/src/go/bin"))
  (add-to-list 'exec-path "/home/scott/src/go/bin")
  (use-package go-mode
    :config
    (setq gofmt-command "goimports")
    (add-hook 'before-save-hook 'gofmt-before-save)
    (add-hook 'go-mode-hook 'setup-go-mode-compile)
    (setenv "GOROOT" "/usr/local/go")
    (setenv "GOPATH" "/home/scott/src/go")
    (add-hook 'go-mode-hook 'flycheck-mode))

  ;; Run linters on save
  (defun setup-go-mode-compile ()
    (if (not (string-match "go" compile-command))
        (set (make-local-variable 'compile-command)
             "gometalinter --deadline 10s && go vet")))
#+END_SRC

*** auto complete
This sets up go-autocomplete, which uses `gocode` for auto completion.

#+BEGIN_SRC emacs-lisp
  (require 'go-autocomplete)
  (require 'auto-complete-config)
#+END_SRC

*** linting
This adds various linters to flycheck.

Dependancies:
- gometalinter `go get github.com/alecthomas/gometalinter`
- sub-linters `gometalinter --install`

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-gometalinter
    :config
    (flycheck-gometalinter-setup)
    ;; skip linting vendor dirs
    (setq flycheck-gometalinter-vendor t)
    ;; use in test files
    (setq flycheck-gometalinter-test t)
    ;; only fast linters
    (setq flycheck-gometalinter-fast t)
    ;; disable gotype
    (setq flycheck-gometalinter-disable-linters '("gotype")))
#+END_SRC

*** go-add-tags
[[https://github.com/syohex/emacs-go-add-tags][go-add-tags]] helps manage tags on struct fields.

# TODO document this

#+BEGIN_SRC emacs-lisp
  (use-package go-add-tags)
#+END_SRC

*** go-eldoc
[[https://github.com/syohex/emacs-go-eldoc][go-eldoc]] formats go documentation for emacs and displays it in the status bar.

#+BEGIN_SRC emacs-lisp
  (use-package go-eldoc
    :diminish eldoc-mode
    :config (add-hook 'go-mode-hook 'go-eldoc-setup))
#+END_SRC

*** go-direx
    This package views go code in a tree style viewer. [[https://github.com/syohex/emacs-go-direx][Page]]
    Depends on direx package.
    Need to install gotags with `go get -u github.com/jstemmer/gotags`
    #+BEGIN_SRC emacs-lisp
      (use-package go-direx)
      (define-key go-mode-map (kbd "C-c C-x") 'go-direx-pop-to-buffer)
    #+END_SRC

*** go-guru
    #+BEGIN_SRC emacs-lisp
      (use-package go-guru)
      (add-hook 'go-mode-hook 'go-guru-hl-identifier-mode)
    #+END_SRC

** magit
[[https://github.com/magit/magit][magit]] is the best git interface known to humankind.

I also use and configure [[https://github.com/sigma/magit-gh-pulls][magit-gh-pulls]] here.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)))

  (use-package magit-gh-pulls
    :config
    (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))
#+END_SRC

** mu4e
mu4e is part of mu, an email indexing and reading system.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
  (require 'mu4e)
  (setq mu4e-maildir "~/.mail")
  (setq mu4e-contexts
        `( ,(make-mu4e-context
             :name "Personal"
             :enter-func (lambda () (message "Entering Personal context"))
             :leave-func (lambda () (mu4e-message "Leaving Personal context"))
             :match-func (lambda (msg)
                           (when msg
                             (string-prefix-p "/barron" (mu4e-message-field msg :maildir))))
             :vars '( ( user-mail-address  . "scott@barron.io" )
                      ( user-full-name     . "Scott Barron" )
                      ( mu4e-trash-folder  . "/barron/trash" )
                      ( mu4e-refile-folder . "/barron/all" )
                      ( mu4e-sent-folder   . "/barron/sent" )
                      ( mu4e-drafts-folder . "/barron/drafts" )))

           ,(make-mu4e-context
             :name "GMail"
             :enter-func (lambda () (message "Switch to GMail context"))
             :match-func (lambda (msg)
                           (when msg
                             (string-prefix-p "/gmail" (mu4e-message-field msg :maildir))))
             :vars '( ( user-mail-address  . "scott.a.barron@gmail.com" )
                      ( user-full-name     . "Scott Barron" )
                      ( mu4e-trash-folder  . "/gmail/trash" )
                      ( mu4e-refile-folder . "/gmail/all" )
                      ( mu4e-sent-folder   . "/gmail/sent" )
                      ( mu4e-drafts-folder . "/gmail/drafts" )))

           ,(make-mu4e-context
             :name "GitHub"
             :enter-func (lambda () (mu4e-message "Switch to GitHub context"))
             :match-func (lambda (msg)
                           (when msg
                             (string-prefix-p "/github" (mu4e-message-field msg :maildir))))
             :vars '( ( user-mail-address . "rubyist@github.com" )
                      ( user-full-name    . "Scott Barron" )
                      ( mu4e-trash-folder . "/github/trash" )
                      ( mu4e-refile-folder . "/github/all" )
                      ( mu4e-sent-folder   . "/github/sent" )
                      ( mu4e-drafts-folder . "/gmail/drafts" )))))
  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-change-filenames-when-moving t)
  (setq mu4e-update-interval 60)
  (setq mu4e-hide-index-messages t)
#+END_SRC

** org mode
Org mode is org mode.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-directory "~/Dropbox/org")
    (setq org-default-notes-file (concat org-directory "/notes.org"))
    (setq org-export-html-postamble nil)
    (setq org-startup-folded (quote overview))
    (setq org-startup-indented t)
    (setq org-file-apps (append '(
                                  ("\\.pdf\\'" . "evince %s")
                                  ) org-file-apps ))

    (setq org-capture-templates
          '(("a" "Appointment" entry (file "~/Dropbox/org/gcal.org" "Appointments")
             "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")))

    (defadvice org-capture-finalize
        (after delete-capture-frame activate)
      "Advise capture-finalize to close the frame"
      (if (equal "capture" (frame-parameter nil 'name))
          (delete-frame)))

    (defadvice org-capture-destroy
        (after delete-capture-frame activate)
      "Advise catpure-destroy to close the frame"
      (if (equal "capture" (frame-parameter nil 'name))
          (delete-frame)))

    (defadvice org-capture-kill
        (after delete-capture-frame activate)
      "Advise capture-kill to close the frame"
      (if (equal "capture" (frame-parameter nil 'name))
          (delete-frame)))

    :bind
    (("\C-c c" . org-capture)
     ("\C-c a" . org-agenda)))

  (use-package noflet
    :config
    (defun make-capture-frame ()
      "Create a new frame and run org-capture"
      (interactive)
      (select-frame-by-name "capture")
      (delete-other-windows)
      (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
        (org-capture))))
#+END_SRC

*** org bullets
org-bullets makes org mode look nice.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** org reveal
[[https://github.com/yjwen/org-reveal][org-reveal]] will build reveal.js presentations from org mode files.

#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0./")
  (setq org-reveal-mathjax t)

  (use-package htmilize)
#+END_SRC

** projectile
[[https://github.com/bbatsov/projectile][projectile]] helps navigate to and within projects. This also sets up [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]].

The primary interactions I use here are:

- `C-c p f` - find file in project
- `C-c p T` - find test file in project
- `C-c p b` - find buffer in project

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy)
    (setq projectile-mode-line '(:eval (format " P[%s]" (projectile-project-name)))))

  (use-package counsel-projectile
    :config
    (counsel-projectile-on))
#+END_SRC

** protobuf
Mode for working with protocol buffers proto files.

#+BEGIN_SRC emacs-lisp
  (use-package protobuf-mode)
#+END_SRC
** swiper
[[https://github.com/abo-abo/swiper][swiper]] is an ivy-based alternative to isearch.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    :bind (("\C-s" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-c g" . counsel-git)
           ("C-c j" . counsel-git-grep)
           ("C-c k" . counsel-ag)
           (:map read-expression-map ("C-r" . counsel-expression-history))))
#+END_SRC

** theme
The theme.

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :config (load-theme 'zenburn t))
#+END_SRC

** try
try lets you try a package without installing it.

#+BEGIN_SRC emacs-lisp
  (use-package try)
#+END_SRC

** undo tree
undo-tree provides a convenient way to navigate the undo ring.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :init
    (global-undo-tree-mode))
#+END_SRC

** which key
which-key figures out what a key does.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC

** yasnippet
yasnippet provides snippets.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :init
    (yas-global-mode 1))
#+END_SRC
